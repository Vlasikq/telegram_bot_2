import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from states import UserProfile
from client import fetch_weather
from utils.utils import calculate_water_goal, calculate_calorie_goal

logging.basicConfig(level=logging.INFO)

router = Router()
users = {}

def get_user_profile(user_id):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    if user_id not in users:
        users[user_id] = {}
    return users[user_id]

@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = get_user_profile(user_id)

    if user_data:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)")
        await state.set_state(UserProfile.name)
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(UserProfile.name)

@router.message(UserProfile.name)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    get_user_profile(user_id)["name"] = message.text

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º/–∂):")
    await state.set_state(UserProfile.gender)

@router.message(UserProfile.gender)
async def process_gender(message: Message, state: FSMContext):
    user_id = message.from_user.id
    gender = message.text.lower()

    if gender not in ["–º", "–∂"]:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ '–º' (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ '–∂' (–∂–µ–Ω—Å–∫–∏–π).")
        return

    get_user_profile(user_id)["gender"] = gender
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(UserProfile.weight)

@router.message(UserProfile.weight)
async def process_weight(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        weight = float(message.text.replace(",", "."))
        get_user_profile(user_id)["weight"] = weight
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(UserProfile.height)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 72.5).")

@router.message(UserProfile.height)
async def process_height(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        height = int(message.text)
        get_user_profile(user_id)["height"] = height
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(UserProfile.age)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.")

@router.message(UserProfile.age)
async def process_age(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        age = int(message.text)
        get_user_profile(user_id)["age"] = age
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(UserProfile.activity)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")

@router.message(UserProfile.activity)
async def process_activity(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        activity = int(message.text)
        get_user_profile(user_id)["activity"] = activity
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(UserProfile.city)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —á–∏—Å–ª–æ–º.")

@router.message(UserProfile.city)
async def process_city(message: Message, state: FSMContext):
    user_id = message.from_user.id
    city = message.text.strip()

    temperature = await fetch_weather(city)
    
    if temperature is None:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        return

    user_data = get_user_profile(user_id)
    user_data["city"] = city
    user_data["temperature"] = temperature
    user_data["water_goal"] = calculate_water_goal(user_data["weight"], user_data["activity"], temperature)
    user_data["calorie_goal"] = calculate_calorie_goal(user_data["weight"], user_data["height"], user_data["age"], user_data["activity"])

    await state.clear()
    await message.answer(
        f"‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!*\n\n"
        f"üë§ *–ò–º—è:* {user_data['name']}\n"
        f"‚ö§ *–ü–æ–ª:* {user_data['gender']}\n"
        f"‚öñÔ∏è *–í–µ—Å:* {user_data['weight']} –∫–≥\n"
        f"üìè *–†–æ—Å—Ç:* {user_data['height']} —Å–º\n"
        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {user_data['age']} –ª–µ—Ç\n"
        f"üèô *–ì–æ—Ä–æ–¥:* {city}\n"
        f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temperature}¬∞C\n" 
        f"üíß *–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã:* {user_data['water_goal']} –º–ª\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏:* {user_data['calorie_goal']} –∫–∫–∞–ª",
        parse_mode="Markdown"
    )

def register_profile_handlers(router: Router):
    router.message.register(set_profile, Command("set_profile"))
    router.message.register(process_name, UserProfile.name)
    router.message.register(process_gender, UserProfile.gender)
    router.message.register(process_weight, UserProfile.weight)
    router.message.register(process_height, UserProfile.height)
    router.message.register(process_age, UserProfile.age)
    router.message.register(process_activity, UserProfile.activity)
    router.message.register(process_city, UserProfile.city)
