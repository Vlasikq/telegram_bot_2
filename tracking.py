from aiogram import types, Dispatcher
from aiogram.filters import Command
from client import fetch_food_calories

users = {}

async def log_food(message: types.Message):
    user_id = message.from_user.id
    food_name = message.text.replace("/log_food ", "").strip()

    if not food_name:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
        return

    if user_id not in users:
        users[user_id] = {"calories": 0, "water": 0, "burned_calories": 0}

    calories = await fetch_food_calories(food_name)

    if calories is not None:
        users[user_id]["calories"] += calories
        await message.answer(f"üçè {food_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {calories} –∫–∫–∞–ª. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
                             f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /check_progress")
    else:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def log_water(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª>")
        return

    if user_id not in users:
        users[user_id] = {"calories": 0, "water": 0, "burned_calories": 0}

    users[user_id]["water"] += int(args[1])
    await message.answer(f"üíß –í—ã –≤—ã–ø–∏–ª–∏ {args[1]} –º–ª –≤–æ–¥—ã."
                         f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /check_progress")

async def log_workout(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) < 3:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>")
        return

    workout_type = args[1]
    try:
        duration = int(args[2])

        if user_id not in users:
            users[user_id] = {"calories": 0, "water": 0, "burned_calories": 0}

        burned_calories = duration * 5
        users[user_id]["burned_calories"] += burned_calories

        await message.answer(f"üî• –í—ã –∑–∞–ø–∏—Å–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {workout_type} ({duration} –º–∏–Ω). "
                             f"–°–æ–∂–∂–µ–Ω–æ {burned_calories} –∫–∫–∞–ª."
                             f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /check_progress")
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")

async def check_progress(message: types.Message):
    user_id = message.from_user.id


    if user_id not in users:
        users[user_id] = {"calories": 0, "water": 0, "burned_calories": 0}

    water = users[user_id].get("water", 0)
    calories = users[user_id].get("calories", 0)
    burned_calories = users[user_id].get("burned_calories", 0)
    balance_calories = calories - burned_calories

    progress_text = (
        f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:"
        f"üíß –í–æ–¥–∞ –≤—ã–ø–∏—Ç–æ: {water} –º–ª"
        f"üçè –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª"
        f"üî• –°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {burned_calories} –∫–∫–∞–ª"
        f"‚öñ –ë–∞–ª–∞–Ω—Å: {balance_calories} –∫–∫–∞–ª"
    )
    await message.answer(progress_text)

def register_tracking_handlers(dp: Dispatcher):
    dp.message.register(log_food, Command(commands=["log_food"]))
    dp.message.register(log_water, Command(commands=["log_water"]))
    dp.message.register(log_workout, Command(commands=["log_workout"]))
    dp.message.register(check_progress, Command(commands=["check_progress"]))
