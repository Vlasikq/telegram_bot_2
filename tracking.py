from aiogram import types, Dispatcher
from aiogram.filters import Command
from client import fetch_food_calories
from logger import logger

users = {}

def get_user_data(user_id):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ `users`."""
    if user_id not in users:
        users[user_id] = {"calories": 0, "water": 0, "burned_calories": 0}
    return users[user_id]

async def log_food(message: types.Message):
    user_id = message.from_user.id
    query = message.text.replace("/log_food", "").strip()

    if not query:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>` –∏–ª–∏ `/log_food <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–µ–¥–∏–Ω–∏—Ü–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>`")
        return

    user_data = get_user_data(user_id)
    calories = await fetch_food_calories(query)

    if isinstance(calories, (int, float)):
        user_data["calories"] += calories
        logger.info(f"üçè User {user_id} –¥–æ–±–∞–≤–∏–ª {query}: {calories} –∫–∫–∞–ª")
        await message.answer(f"üçè {query} —Å–æ–¥–µ—Ä–∂–∏—Ç {calories} –∫–∫–∞–ª. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n"
                             f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /check_progress")
    else:
        logger.warning(f"‚ö† User {user_id}: –ø—Ä–æ–¥—É–∫—Ç '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("‚ö† –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API.")

async def log_water(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª>`")
        return

    user_data = get_user_data(user_id)
    water_amount = int(args[1])
    user_data["water"] += water_amount

    logger.info(f"üíß User {user_id} –≤—ã–ø–∏–ª {water_amount} –º–ª –≤–æ–¥—ã")
    await message.answer(f"üíß –í—ã –≤—ã–ø–∏–ª–∏ {water_amount} –º–ª –≤–æ–¥—ã.\n"
                         f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /check_progress")

async def log_workout(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=2)

    if len(args) < 3 or not args[2].isdigit():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>`")
        return

    workout_type, duration = args[1], int(args[2])
    user_data = get_user_data(user_id)
    burned_calories = duration * 5
    user_data["burned_calories"] += burned_calories

    logger.info(f"üî• User {user_id} –∑–∞–ø–∏—Å–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {workout_type} ({duration} –º–∏–Ω) - {burned_calories} –∫–∫–∞–ª")
    await message.answer(f"üî• –í—ã –∑–∞–ø–∏—Å–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: *{workout_type}* ({duration} –º–∏–Ω).\n"
                         f"–°–æ–∂–∂–µ–Ω–æ {burned_calories} –∫–∫–∞–ª.\n"
                         f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /check_progress")

async def check_progress(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    progress_text = (
        "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n"
        f"üíß –í–æ–¥–∞ –≤—ã–ø–∏—Ç–æ: *{user_data['water']} –º–ª*\n"
        f"üçè –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: *{user_data['calories']} –∫–∫–∞–ª*\n"
        f"üî• –°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: *{user_data['burned_calories']} –∫–∫–∞–ª*\n"
        f"‚öñ –ë–∞–ª–∞–Ω—Å: *{user_data['calories'] - user_data['burned_calories']} –∫–∫–∞–ª*"
    )

    logger.info(f"üìä User {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å: {user_data}")
    await message.answer(progress_text, parse_mode="Markdown")

def register_tracking_handlers(dp: Dispatcher):
    dp.message.register(log_food, Command("log_food"))
    dp.message.register(log_water, Command("log_water"))
    dp.message.register(log_workout, Command("log_workout"))
    dp.message.register(check_progress, Command("check_progress"))
